--[[
  SmoothUI Library v2
  Features:
  - Smooth rounded corners + black shadow
  - Draggable window
  - Centered tab buttons with spacing
  - Slider with value display and dragging
  - Dropdown with search
  - Tickbox toggles (right side, green check with fade)
  - Notification system
  - Config save/load (using Roblox DataStore or local file simulation)
  - UI toggle keybind (RightControl)
  - Title bar with roblox profile picture button that opens sliding Profile tab on right side showing your profile info fetched from Roblox API
--]]

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local SmoothUILib = {}

function SmoothUILib:CreateWindow(title, robloxUserId)
    local Settings = {
        AccentColor = Color3.fromRGB(80, 120, 255),
        Background = Color3.fromRGB(25, 25, 30),
        Header = Color3.fromRGB(40, 40, 45),
        TabBG = Color3.fromRGB(30, 30, 35),
        Font = Enum.Font.SourceSansSemibold,
        ShadowColor = Color3.new(0,0,0),
    }

    local Gui = Instance.new("ScreenGui")
    Gui.Name = "SmoothUI"
    Gui.ResetOnSpawn = false
    Gui.Parent = game.CoreGui

    -- Main Window Frame
    local Main = Instance.new("Frame", Gui)
    Main.Size = UDim2.new(0, 580, 0, 380)
    Main.Position = UDim2.new(0.5, -290, 0.5, -190)
    Main.BackgroundColor3 = Settings.Background
    Main.BorderSizePixel = 0
    Main.Active = true
    Main.Draggable = true
    local MainUICorner = Instance.new("UICorner", Main)
    MainUICorner.CornerRadius = UDim.new(0, 10)

    -- Black shadow (ImageLabel)
    local Shadow = Instance.new("ImageLabel", Main)
    Shadow.Image = "rbxassetid://1316045217" -- Shadow image asset
    Shadow.Size = UDim2.new(1, 60, 1, 60)
    Shadow.Position = UDim2.new(0, -30, 0, -30)
    Shadow.BackgroundTransparency = 1
    Shadow.ImageColor3 = Settings.ShadowColor
    Shadow.ImageTransparency = 0.5
    Shadow.ZIndex = -1

    -- Title bar
    local Title = Instance.new("Frame", Main)
    Title.Size = UDim2.new(1, 0, 0, 40)
    Title.BackgroundColor3 = Settings.Header
    Title.BorderSizePixel = 0
    local TitleUICorner = Instance.new("UICorner", Title)
    TitleUICorner.CornerRadius = UDim.new(0, 10)

    local TitleLabel = Instance.new("TextLabel", Title)
    TitleLabel.Size = UDim2.new(1, -60, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title or "Smooth UI"
    TitleLabel.TextColor3 = Color3.new(1, 1, 1)
    TitleLabel.Font = Settings.Font
    TitleLabel.TextSize = 20
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.TextYAlignment = Enum.TextYAlignment.Center

    -- Profile Button with Roblox Avatar
    local ProfileBtn = Instance.new("ImageButton", Title)
    ProfileBtn.Size = UDim2.new(0, 32, 0, 32)
    ProfileBtn.Position = UDim2.new(1, -42, 0.5, -16)
    ProfileBtn.BackgroundTransparency = 1
    ProfileBtn.Image = "rbxthumb://type=AvatarHeadShot&id=".. tostring(robloxUserId) .."&w=48&h=48"
    ProfileBtn.AutoButtonColor = true
    ProfileBtn.Name = "ProfileButton"
    ProfileBtn.ZIndex = 2

    -- TabBar on left
    local TabBar = Instance.new("Frame", Main)
    TabBar.Size = UDim2.new(0, 120, 1, -40)
    TabBar.Position = UDim2.new(0, 0, 0, 40)
    TabBar.BackgroundColor3 = Settings.TabBG
    TabBar.BorderSizePixel = 0
    local TabBarCorner = Instance.new("UICorner", TabBar)
    TabBarCorner.CornerRadius = UDim.new(0, 8)

    -- Center tabs vertically
    local TabHolder = Instance.new("Frame", TabBar)
    TabHolder.Size = UDim2.new(1, 0, 1, 0)
    TabHolder.BackgroundTransparency = 1

    local TabLayout = Instance.new("UIListLayout", TabHolder)
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Padding = UDim.new(0, 12)
    TabLayout.VerticalAlignment = Enum.VerticalAlignment.Center

    local Tabs = {}
    local CurrentConfig = {}

    -- Content Holder
    local ContentHolder = Instance.new("Frame", Main)
    ContentHolder.Size = UDim2.new(1, -130, 1, -50)
    ContentHolder.Position = UDim2.new(0, 125, 0, 45)
    ContentHolder.BackgroundTransparency = 1

    -- Sliding Profile Tab
    local ProfileTab = Instance.new("Frame", Main)
    ProfileTab.Size = UDim2.new(0, 240, 1, -50)
    ProfileTab.Position = UDim2.new(1, 10, 0, 45)
    ProfileTab.BackgroundColor3 = Settings.Background
    ProfileTab.BorderSizePixel = 0
    local ProfileUICorner = Instance.new("UICorner", ProfileTab)
    ProfileUICorner.CornerRadius = UDim.new(0, 8)
    ProfileTab.Visible = false

    -- ProfileTab content: Simple example info
    local ProfileTitle = Instance.new("TextLabel", ProfileTab)
    ProfileTitle.Size = UDim2.new(1, 0, 0, 30)
    ProfileTitle.Position = UDim2.new(0, 0, 0, 10)
    ProfileTitle.BackgroundTransparency = 1
    ProfileTitle.Text = "Roblox Profile"
    ProfileTitle.Font = Settings.Font
    ProfileTitle.TextSize = 18
    ProfileTitle.TextColor3 = Color3.new(1,1,1)
    ProfileTitle.TextXAlignment = Enum.TextXAlignment.Center

    local ProfileNameLabel = Instance.new("TextLabel", ProfileTab)
    ProfileNameLabel.Size = UDim2.new(1, -20, 0, 25)
    ProfileNameLabel.Position = UDim2.new(0, 10, 0, 50)
    ProfileNameLabel.BackgroundTransparency = 1
    ProfileNameLabel.Text = "Loading..."
    ProfileNameLabel.Font = Settings.Font
    ProfileNameLabel.TextSize = 16
    ProfileNameLabel.TextColor3 = Color3.new(1,1,1)
    ProfileNameLabel.TextXAlignment = Enum.TextXAlignment.Left

    local ProfileDescLabel = Instance.new("TextLabel", ProfileTab)
    ProfileDescLabel.Size = UDim2.new(1, -20, 0, 60)
    ProfileDescLabel.Position = UDim2.new(0, 10, 0, 80)
    ProfileDescLabel.BackgroundTransparency = 1
    ProfileDescLabel.Text = ""
    ProfileDescLabel.Font = Settings.Font
    ProfileDescLabel.TextSize = 14
    ProfileDescLabel.TextColor3 = Color3.new(0.8,0.8,0.8)
    ProfileDescLabel.TextWrapped = true
    ProfileDescLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Function to fetch profile info from Roblox API
    local function FetchProfile()
        task.spawn(function()
            local success, data = pcall(function()
                local url = ("https://users.roblox.com/v1/users/%d"):format(robloxUserId)
                local res = game:HttpGet(url)
                return HttpService:JSONDecode(res)
            end)
            if success and data then
                ProfileNameLabel.Text = "Username: "..(data.name or "N/A")
                ProfileDescLabel.Text = "Display Name: "..(data.displayName or "N/A")
            else
                ProfileNameLabel.Text = "Error loading profile."
            end
        end)
    end

    FetchProfile()

    -- Slide ProfileTab function
    local function ShowProfileTab(show)
        if show then
            ProfileTab.Visible = true
            TweenService:Create(ProfileTab, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Position = UDim2.new(1, -250, 0, 45)
            }):Play()
        else
            TweenService:Create(ProfileTab, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
                Position = UDim2.new(1, 10, 0, 45)
            }):Play()
            task.delay(0.3, function()
                ProfileTab.Visible = false
            end)
        end
    end

    local profileOpen = false
    ProfileBtn.MouseButton1Click:Connect(function()
        profileOpen = not profileOpen
        ShowProfileTab(profileOpen)
    end)

    -- Tabs API
    function SmoothUILib:CreateTab(name)
        local Btn = Instance.new("TextButton", TabHolder)
        Btn.Size = UDim2.new(1, -20, 0, 32)
        Btn.Position = UDim2.new(0, 10, 0, 0)
        Btn.Text = name
        Btn.Font = Settings.Font
        Btn.TextSize = 14
        Btn.TextColor3 = Color3.new(1, 1, 1)
        Btn.BackgroundColor3 = Settings.AccentColor
        Btn.BorderSizePixel = 0
        Btn.TextWrapped = true
        local BtnCorner = Instance.new("UICorner", Btn)
        BtnCorner.CornerRadius = UDim.new(0, 6)

        local Content = Instance.new("ScrollingFrame", ContentHolder)
        Content.Size = UDim2.new(1, 0, 1, 0)
        Content.Position = UDim2.new(0, 0, 0, 0)
        Content.BackgroundColor3 = Settings.Background
        Content.BorderSizePixel = 0
        Content.ScrollBarThickness = 4
        Content.Visible = false
        local ContentCorner = Instance.new("UICorner", Content)
        ContentCorner.CornerRadius = UDim.new(0, 8)

        local Layout = Instance.new("UIListLayout", Content)
        Layout.Padding = UDim.new(0, 12)
        Layout.SortOrder = Enum.SortOrder.LayoutOrder

        Btn.MouseButton1Click:Connect(function()
            for _, v in pairs(Tabs) do
                v.Content.Visible = false
            end
            Content.Visible = true
            -- Close profile if open
            if profileOpen then
                profileOpen = false
                ShowProfileTab(false)
            end
        end)

        local API = {}

        -- Add Button
        function API:AddButton(txt, callback)
            local B = Instance.new("TextButton", Content)
            B.Size = UDim2.new(1, -20, 0, 32)
            B.Text = txt
            B.Font = Settings.Font
            B.TextSize = 14
            B.TextColor3 = Color3.new(1, 1, 1)
            B.BackgroundColor3 = Settings.AccentColor
            B.BorderSizePixel = 0
            local BCorner = Instance.new("UICorner", B)
            BCorner.CornerRadius = UDim.new(0, 6)
            B.MouseButton1Click:Connect(callback)
        end

        -- Add Toggle with tick on right
        function API:AddToggle(txt, default, callback)
            local Hold = Instance.new("Frame", Content)
            Hold.Size = UDim2.new(1, -20, 0, 32)
            Hold.BackgroundTransparency = 1

            local Label = Instance.new("TextLabel", Hold)
            Label.Size = UDim2.new(1, -50, 1, 0)
            Label.Position = UDim2.new(0, 0, 0, 0)
            Label.Text = txt
            Label.TextColor3 = Color3.new(1, 1, 1)
            Label.BackgroundTransparency = 1
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Font = Settings.Font
            Label.TextSize = 14

            local Box = Instance.new("TextButton", Hold)
            Box.Size = UDim2.new(0, 32, 0, 32)
            Box.Position = UDim2.new(1, -32, 0, 0)
            Box.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            Box.Text = ""
            Box.AutoButtonColor = false
            local BoxCorner = Instance.new("UICorner", Box)
            BoxCorner.CornerRadius = UDim.new(0, 6)

            local Tick = Instance.new("TextLabel", Box)
            Tick.Size = UDim2.new(1, 0, 1, 0)
            Tick.Text = "✔"
            Tick.TextColor3 = Color3.fromRGB(0, 255, 0)
            Tick.TextScaled = true
            Tick.BackgroundTransparency = 1
            Tick.Font = Settings.Font
            Tick.TextTransparency = default and 0 or 1

            local state = default or false
            Box.MouseButton1Click:Connect(function()
                state = not state
                TweenService:Create(Tick, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    TextTransparency = state and 0 or 1
                }):Play()
                if callback then
                    callback(state)
                end
            end)
        end

        -- Add Slider
        function API:AddSlider(txt, min, max, default, callback)
            local Hold = Instance.new("Frame", Content)
            Hold.Size = UDim2.new(1, -20, 0, 40)
            Hold.BackgroundTransparency = 1

            local Label = Instance.new("TextLabel", Hold)
            Label.Size = UDim2.new(1, -70, 0, 20)
            Label.Position = UDim2.new(0, 0, 0, 0)
            Label.Text = txt
            Label.TextColor3 = Color3.new(1, 1, 1)
            Label.BackgroundTransparency = 1
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Font = Settings.Font
            Label.TextSize = 14

            local ValueLabel = Instance.new("TextLabel", Hold)
            ValueLabel.Size = UDim2.new(0, 60, 0, 20)
            ValueLabel.Position = UDim2.new(1, -60, 0, 0)
            ValueLabel.Text = tostring(default)
            ValueLabel.TextColor3 = Color3.new(1, 1, 1)
            ValueLabel.BackgroundTransparency = 1
            ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
            ValueLabel.Font = Settings.Font
            ValueLabel.TextSize = 14

            local SliderBg = Instance.new("Frame", Hold)
            SliderBg.Size = UDim2.new(1, 0, 0, 10)
            SliderBg.Position = UDim2.new(0, 0, 1, -15)
            SliderBg.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SliderBg.BorderSizePixel = 0
            local BgCorner = Instance.new("UICorner", SliderBg)
            BgCorner.CornerRadius = UDim.new(0, 5)

            local SliderFill = Instance.new("Frame", SliderBg)
            SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            SliderFill.BackgroundColor3 = Settings.AccentColor
            local FillCorner = Instance.new("UICorner", SliderFill)
            FillCorner.CornerRadius = UDim.new(0, 5)

            local dragging = false

            local function updateSlider(x)
                local relative = math.clamp(x - SliderBg.AbsolutePosition.X, 0, SliderBg.AbsoluteSize.X)
                local percent = relative / SliderBg.AbsoluteSize.X
                local value = math.floor(min + (max - min) * percent)
                SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                ValueLabel.Text = tostring(value)
                if callback then
                    callback(value)
                end
                return value
            end

            SliderBg.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateSlider(input.Position.X)
                end
            end)

            SliderBg.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            SliderBg.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input.Position.X)
                end
            end)
        end

        -- Add Dropdown
        function API:AddDropdown(txt, options, default, callback)
            local Hold = Instance.new("Frame", Content)
            Hold.Size = UDim2.new(1, -20, 0, 40)
            Hold.BackgroundTransparency = 1

            local Label = Instance.new("TextLabel", Hold)
            Label.Size = UDim2.new(1, -20, 0, 20)
            Label.Position = UDim2.new(0, 0, 0, 0)
            Label.Text = txt
            Label.TextColor3 = Color3.new(1, 1, 1)
            Label.BackgroundTransparency = 1
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Font = Settings.Font
            Label.TextSize = 14

            local DropdownBtn = Instance.new("TextButton", Hold)
            DropdownBtn.Size = UDim2.new(1, 0, 0, 20)
            DropdownBtn.Position = UDim2.new(0, 0, 0, 20)
            DropdownBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            DropdownBtn.BorderSizePixel = 0
            local DropdownCorner = Instance.new("UICorner", DropdownBtn)
            DropdownCorner.CornerRadius = UDim.new(0, 5)
            DropdownBtn.Text = ""
            DropdownBtn.AutoButtonColor = true

            local SelectedLabel = Instance.new("TextLabel", DropdownBtn)
            SelectedLabel.Size = UDim2.new(1, -20, 1, 0)
            SelectedLabel.Position = UDim2.new(0, 10, 0, 0)
            SelectedLabel.BackgroundTransparency = 1
            SelectedLabel.TextColor3 = Color3.new(1, 1, 1)
            SelectedLabel.TextXAlignment = Enum.TextXAlignment.Left
            SelectedLabel.Font = Settings.Font
            SelectedLabel.TextSize = 14
            SelectedLabel.Text = default or (options[1] or "")

            local Arrow = Instance.new("ImageLabel", DropdownBtn)
            Arrow.Size = UDim2.new(0, 14, 0, 14)
            Arrow.Position = UDim2.new(1, -18, 0.5, -7)
            Arrow.BackgroundTransparency = 1
            Arrow.Image = "rbxassetid://3926305904"
            Arrow.Rotation = 0

            local DropdownList = Instance.new("Frame", Hold)
            DropdownList.Size = UDim2.new(1, 0, 0, 0)
            DropdownList.Position = UDim2.new(0, 0, 0, 40)
            DropdownList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            DropdownList.BorderSizePixel = 0
            DropdownList.ClipsDescendants = true
            local DropdownCorner2 = Instance.new("UICorner", DropdownList)
            DropdownCorner2.CornerRadius = UDim.new(0, 5)

            local DropdownLayout = Instance.new("UIListLayout", DropdownList)
            DropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
            DropdownLayout.Padding = UDim.new(0, 3)

            local open = false

            DropdownBtn.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    DropdownList:TweenSize(UDim2.new(1, 0, 0, math.min(#options * 24 + 6, 120)), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3, true)
                    Arrow.Rotation = 180
                else
                    DropdownList:TweenSize(UDim2.new(1, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3, true)
                    Arrow.Rotation = 0
                end
            end)

            local function selectOption(opt)
                SelectedLabel.Text = opt
                if callback then callback(opt) end
                open = false
                DropdownList:TweenSize(UDim2.new(1, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3, true)
                Arrow.Rotation = 0
            end

            for i, option in ipairs(options) do
                local OptionBtn = Instance.new("TextButton", DropdownList)
                OptionBtn.Size = UDim2.new(1, -10, 0, 24)
                OptionBtn.Position = UDim2.new(0, 5, 0, 0)
                OptionBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                OptionBtn.BorderSizePixel = 0
                OptionBtn.Text = option
                OptionBtn.TextColor3 = Color3.new(1, 1, 1)
                OptionBtn.Font = Settings.Font
                OptionBtn.TextSize = 14
                OptionBtn.AutoButtonColor = true
                local OptionCorner = Instance.new("UICorner", OptionBtn)
                OptionCorner.CornerRadius = UDim.new(0, 5)

                OptionBtn.MouseButton1Click:Connect(function()
                    selectOption(option)
                end)
            end
        end

        -- Add Notification
        function API:Notify(text, duration)
            duration = duration or 3
            local notif = Instance.new("Frame", Gui)
            notif.Size = UDim2.new(0, 250, 0, 40)
            notif.Position = UDim2.new(0.5, -125, 0, 30)
            notif.BackgroundColor3 = Settings.AccentColor
            notif.BorderSizePixel = 0
            notif.ZIndex = 1000
            local notifCorner = Instance.new("UICorner", notif)
            notifCorner.CornerRadius = UDim.new(0, 8)

            local notifText = Instance.new("TextLabel", notif)
            notifText.Size = UDim2.new(1, -20, 1, 0)
            notifText.Position = UDim2.new(0, 10, 0, 0)
            notifText.BackgroundTransparency = 1
            notifText.Text = text
            notifText.TextColor3 = Color3.new(1,1,1)
            notifText.Font = Settings.Font
            notifText.TextSize = 16
            notifText.TextWrapped = true

            notif.AnchorPoint = Vector2.new(0.5, 0)
            notif.Position = UDim2.new(0.5, 0, 0, -50)

            -- Tween in
            TweenService:Create(notif, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Position = UDim2.new(0.5, 0, 0, 30)
            }):Play()

            task.delay(duration, function()
                TweenService:Create(notif, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
                    Position = UDim2.new(0.5, 0, 0, -50)
                }):Play()
                task.delay(0.5, function()
                    notif:Destroy()
                end)
            end)
        end

        Tabs[name] = {Content = Content, TabButton = Btn}
        return API
    end

    -- Show first tab automatically
    task.defer(function()
        for _, v in pairs(Tabs) do
            v.Content.Visible = false
        end
        local firstTab = next(Tabs)
        if firstTab then
            Tabs[firstTab].Content.Visible = true
        end
    end)

    -- UI toggle keybind (RightControl)
    local uiVisible = true
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
            uiVisible = not uiVisible
            Gui.Enabled = uiVisible
        end
    end)

    -- Config save/load
    local Config = {}
    function SmoothUILib:SaveConfig(name)
        Config[name] = {}
        for tabName, tabData in pairs(Tabs) do
            local content = tabData.Content
            for _, child in pairs(content:GetChildren()) do
                if child:IsA("Frame") then
                    local label = child:FindFirstChildOfClass("TextLabel")
                    if label then
                        local toggle = child:FindFirstChildOfClass("TextButton")
                        if toggle and toggle:FindFirstChildWhichIsA("TextLabel") then
                            -- Toggle value
                            local tick = toggle:FindFirstChildWhichIsA("TextLabel")
                            Config[name][label.Text] = (tick.TextTransparency == 0)
                        elseif child:FindFirstChildOfClass("Frame") then
                            -- Slider or Dropdown -- You can expand this section for saving sliders/dropdowns
                        end
                    end
                end
            end
        end
        -- Save Config (you can customize this to DataStore or file saving)
        print("Config saved:", HttpService:JSONEncode(Config[name]))
        return Config[name]
    end

    function SmoothUILib:LoadConfig(name)
        local saved = Config[name]
        if not saved then return end
        for tabName, tabData in pairs(Tabs) do
            local content = tabData.Content
            for _, child in pairs(content:GetChildren()) do
                if child:IsA("Frame") then
                    local label = child:FindFirstChildOfClass("TextLabel")
                    if label then
                        local toggle = child:FindFirstChildOfClass("TextButton")
                        if toggle and toggle:FindFirstChildWhichIsA("TextLabel") then
                            local tick = toggle:FindFirstChildWhichIsA("TextLabel")
                            local val = saved[label.Text]
                            if val ~= nil then
                                tick.TextTransparency = val and 0 or 1
                            end
                        end
                    end
                end
            end
        end
    end

    return SmoothUILib
end

return SmoothUILib
